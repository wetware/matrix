// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wetware/matrix/pkg (interfaces: ClockController,HostFactory)

// Package mock_pkg is a generated GoMock package.
package mock_pkg

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	host "github.com/libp2p/go-libp2p-core/host"
	config "github.com/libp2p/go-libp2p/config"
)

// MockClockController is a mock of ClockController interface.
type MockClockController struct {
	ctrl     *gomock.Controller
	recorder *MockClockControllerMockRecorder
}

// MockClockControllerMockRecorder is the mock recorder for MockClockController.
type MockClockControllerMockRecorder struct {
	mock *MockClockController
}

// NewMockClockController creates a new mock instance.
func NewMockClockController(ctrl *gomock.Controller) *MockClockController {
	mock := &MockClockController{ctrl: ctrl}
	mock.recorder = &MockClockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClockController) EXPECT() *MockClockControllerMockRecorder {
	return m.recorder
}

// Accuracy mocks base method.
func (m *MockClockController) Accuracy() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accuracy")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Accuracy indicates an expected call of Accuracy.
func (mr *MockClockControllerMockRecorder) Accuracy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accuracy", reflect.TypeOf((*MockClockController)(nil).Accuracy))
}

// Advance mocks base method.
func (m *MockClockController) Advance(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Advance", arg0)
}

// Advance indicates an expected call of Advance.
func (mr *MockClockControllerMockRecorder) Advance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Advance", reflect.TypeOf((*MockClockController)(nil).Advance), arg0)
}

// After mocks base method.
func (m *MockClockController) After(arg0 time.Duration, arg1 func()) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "After", arg0, arg1)
	ret0, _ := ret[0].(func())
	return ret0
}

// After indicates an expected call of After.
func (mr *MockClockControllerMockRecorder) After(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "After", reflect.TypeOf((*MockClockController)(nil).After), arg0, arg1)
}

// Ticker mocks base method.
func (m *MockClockController) Ticker(arg0 time.Duration, arg1 func()) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ticker", arg0, arg1)
	ret0, _ := ret[0].(func())
	return ret0
}

// Ticker indicates an expected call of Ticker.
func (mr *MockClockControllerMockRecorder) Ticker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ticker", reflect.TypeOf((*MockClockController)(nil).Ticker), arg0, arg1)
}

// MockHostFactory is a mock of HostFactory interface.
type MockHostFactory struct {
	ctrl     *gomock.Controller
	recorder *MockHostFactoryMockRecorder
}

// MockHostFactoryMockRecorder is the mock recorder for MockHostFactory.
type MockHostFactoryMockRecorder struct {
	mock *MockHostFactory
}

// NewMockHostFactory creates a new mock instance.
func NewMockHostFactory(ctrl *gomock.Controller) *MockHostFactory {
	mock := &MockHostFactory{ctrl: ctrl}
	mock.recorder = &MockHostFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostFactory) EXPECT() *MockHostFactoryMockRecorder {
	return m.recorder
}

// NewHost mocks base method.
func (m *MockHostFactory) NewHost(arg0 context.Context, arg1 []config.Option) (host.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHost", arg0, arg1)
	ret0, _ := ret[0].(host.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewHost indicates an expected call of NewHost.
func (mr *MockHostFactoryMockRecorder) NewHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHost", reflect.TypeOf((*MockHostFactory)(nil).NewHost), arg0, arg1)
}
