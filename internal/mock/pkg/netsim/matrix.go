// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wetware/matrix/pkg/netsim (interfaces: Scope,NamespaceProvider)

// Package mock_netsim is a generated GoMock package.
package mock_netsim

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	discovery "github.com/libp2p/go-libp2p-core/discovery"
	peer "github.com/libp2p/go-libp2p-core/peer"
	netsim "github.com/wetware/matrix/pkg/netsim"
)

// MockScope is a mock of Scope interface.
type MockScope struct {
	ctrl     *gomock.Controller
	recorder *MockScopeMockRecorder
}

// MockScopeMockRecorder is the mock recorder for MockScope.
type MockScopeMockRecorder struct {
	mock *MockScope
}

// NewMockScope creates a new mock instance.
func NewMockScope(ctrl *gomock.Controller) *MockScope {
	mock := &MockScope{ctrl: ctrl}
	mock.recorder = &MockScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScope) EXPECT() *MockScopeMockRecorder {
	return m.recorder
}

// Peers mocks base method.
func (m *MockScope) Peers() netsim.InfoSlice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peers")
	ret0, _ := ret[0].(netsim.InfoSlice)
	return ret0
}

// Peers indicates an expected call of Peers.
func (mr *MockScopeMockRecorder) Peers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockScope)(nil).Peers))
}

// Upsert mocks base method.
func (m *MockScope) Upsert(arg0 *peer.AddrInfo, arg1 *discovery.Options) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockScopeMockRecorder) Upsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockScope)(nil).Upsert), arg0, arg1)
}

// MockNamespaceProvider is a mock of NamespaceProvider interface.
type MockNamespaceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceProviderMockRecorder
}

// MockNamespaceProviderMockRecorder is the mock recorder for MockNamespaceProvider.
type MockNamespaceProviderMockRecorder struct {
	mock *MockNamespaceProvider
}

// NewMockNamespaceProvider creates a new mock instance.
func NewMockNamespaceProvider(ctrl *gomock.Controller) *MockNamespaceProvider {
	mock := &MockNamespaceProvider{ctrl: ctrl}
	mock.recorder = &MockNamespaceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceProvider) EXPECT() *MockNamespaceProviderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockNamespaceProvider) Load(arg0 string) (netsim.Scope, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(netsim.Scope)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockNamespaceProviderMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockNamespaceProvider)(nil).Load), arg0)
}

// LoadOrCreate mocks base method.
func (m *MockNamespaceProvider) LoadOrCreate(arg0 string) netsim.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrCreate", arg0)
	ret0, _ := ret[0].(netsim.Scope)
	return ret0
}

// LoadOrCreate indicates an expected call of LoadOrCreate.
func (mr *MockNamespaceProviderMockRecorder) LoadOrCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrCreate", reflect.TypeOf((*MockNamespaceProvider)(nil).LoadOrCreate), arg0)
}
